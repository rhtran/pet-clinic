// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package owner

import mock "github.com/stretchr/testify/mock"

// MockOwnerRepositorier is an autogenerated mock type for the OwnerRepositorier type
type MockOwnerRepositorier struct {
	mock.Mock
}

// FindAll provides a mock function with given fields:
func (_m *MockOwnerRepositorier) FindAll() ([]Owner, error) {
	ret := _m.Called()

	var r0 []Owner
	if rf, ok := ret.Get(0).(func() []Owner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Owner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllWithPets provides a mock function with given fields:
func (_m *MockOwnerRepositorier) FindAllWithPets() ([]Owner, error) {
	ret := _m.Called()

	var r0 []Owner
	if rf, ok := ret.Get(0).(func() []Owner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Owner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *MockOwnerRepositorier) FindById(id int) (*Owner, error) {
	ret := _m.Called(id)

	var r0 *Owner
	if rf, ok := ret.Get(0).(func(int) *Owner); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Owner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByLastName provides a mock function with given fields: lastName
func (_m *MockOwnerRepositorier) FindByLastName(lastName string) ([]Owner, error) {
	ret := _m.Called(lastName)

	var r0 []Owner
	if rf, ok := ret.Get(0).(func(string) []Owner); ok {
		r0 = rf(lastName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Owner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(lastName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: owner
func (_m *MockOwnerRepositorier) Insert(owner *Owner) (*Owner, error) {
	ret := _m.Called(owner)

	var r0 *Owner
	if rf, ok := ret.Get(0).(func(*Owner) *Owner); ok {
		r0 = rf(owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Owner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Owner) error); ok {
		r1 = rf(owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: owner
func (_m *MockOwnerRepositorier) Update(owner *Owner) (*Owner, error) {
	ret := _m.Called(owner)

	var r0 *Owner
	if rf, ok := ret.Get(0).(func(*Owner) *Owner); ok {
		r0 = rf(owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Owner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Owner) error); ok {
		r1 = rf(owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
