// Code generated by mockery v2.42.2. DO NOT EDIT.

package visit

import mock "github.com/stretchr/testify/mock"

// MockServicer is an autogenerated mock type for the Servicer type
type MockServicer struct {
	mock.Mock
}

type MockServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServicer) EXPECT() *MockServicer_Expecter {
	return &MockServicer_Expecter{mock: &_m.Mock}
}

// getAllVisits provides a mock function with given fields:
func (_m *MockServicer) getAllVisits() ([]Response, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getAllVisits")
	}

	var r0 []Response
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Response, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Response); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Response)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicer_getAllVisits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getAllVisits'
type MockServicer_getAllVisits_Call struct {
	*mock.Call
}

// getAllVisits is a helper method to define mock.On call
func (_e *MockServicer_Expecter) getAllVisits() *MockServicer_getAllVisits_Call {
	return &MockServicer_getAllVisits_Call{Call: _e.mock.On("getAllVisits")}
}

func (_c *MockServicer_getAllVisits_Call) Run(run func()) *MockServicer_getAllVisits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServicer_getAllVisits_Call) Return(_a0 []Response, _a1 error) *MockServicer_getAllVisits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicer_getAllVisits_Call) RunAndReturn(run func() ([]Response, error)) *MockServicer_getAllVisits_Call {
	_c.Call.Return(run)
	return _c
}

// getVisitById provides a mock function with given fields: id
func (_m *MockServicer) getVisitById(id int) (*Response, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for getVisitById")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*Response, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *Response); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicer_getVisitById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getVisitById'
type MockServicer_getVisitById_Call struct {
	*mock.Call
}

// getVisitById is a helper method to define mock.On call
//   - id int
func (_e *MockServicer_Expecter) getVisitById(id interface{}) *MockServicer_getVisitById_Call {
	return &MockServicer_getVisitById_Call{Call: _e.mock.On("getVisitById", id)}
}

func (_c *MockServicer_getVisitById_Call) Run(run func(id int)) *MockServicer_getVisitById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockServicer_getVisitById_Call) Return(_a0 *Response, _a1 error) *MockServicer_getVisitById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicer_getVisitById_Call) RunAndReturn(run func(int) (*Response, error)) *MockServicer_getVisitById_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServicer creates a new instance of MockServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServicer {
	mock := &MockServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
