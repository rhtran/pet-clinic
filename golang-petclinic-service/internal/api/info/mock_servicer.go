// Code generated by mockery v2.42.2. DO NOT EDIT.

package info

import mock "github.com/stretchr/testify/mock"

// MockServicer is an autogenerated mock type for the Servicer type
type MockServicer struct {
	mock.Mock
}

type MockServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServicer) EXPECT() *MockServicer_Expecter {
	return &MockServicer_Expecter{mock: &_m.Mock}
}

// getAppInfo provides a mock function with given fields:
func (_m *MockServicer) getAppInfo() (*Info, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getAppInfo")
	}

	var r0 *Info
	var r1 error
	if rf, ok := ret.Get(0).(func() (*Info, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *Info); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Info)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicer_getAppInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getAppInfo'
type MockServicer_getAppInfo_Call struct {
	*mock.Call
}

// getAppInfo is a helper method to define mock.On call
func (_e *MockServicer_Expecter) getAppInfo() *MockServicer_getAppInfo_Call {
	return &MockServicer_getAppInfo_Call{Call: _e.mock.On("getAppInfo")}
}

func (_c *MockServicer_getAppInfo_Call) Run(run func()) *MockServicer_getAppInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServicer_getAppInfo_Call) Return(_a0 *Info, _a1 error) *MockServicer_getAppInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicer_getAppInfo_Call) RunAndReturn(run func() (*Info, error)) *MockServicer_getAppInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServicer creates a new instance of MockServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServicer {
	mock := &MockServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
