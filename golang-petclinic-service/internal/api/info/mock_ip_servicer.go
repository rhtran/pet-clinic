// Code generated by mockery v2.42.2. DO NOT EDIT.

package info

import (
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// MockIPServicer is an autogenerated mock type for the IPServicer type
type MockIPServicer struct {
	mock.Mock
}

type MockIPServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIPServicer) EXPECT() *MockIPServicer_Expecter {
	return &MockIPServicer_Expecter{mock: &_m.Mock}
}

// lookupIP provides a mock function with given fields: host
func (_m *MockIPServicer) lookupIP(host string) ([]net.IP, error) {
	ret := _m.Called(host)

	if len(ret) == 0 {
		panic("no return value specified for lookupIP")
	}

	var r0 []net.IP
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]net.IP, error)); ok {
		return rf(host)
	}
	if rf, ok := ret.Get(0).(func(string) []net.IP); ok {
		r0 = rf(host)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]net.IP)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(host)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIPServicer_lookupIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'lookupIP'
type MockIPServicer_lookupIP_Call struct {
	*mock.Call
}

// lookupIP is a helper method to define mock.On call
//   - host string
func (_e *MockIPServicer_Expecter) lookupIP(host interface{}) *MockIPServicer_lookupIP_Call {
	return &MockIPServicer_lookupIP_Call{Call: _e.mock.On("lookupIP", host)}
}

func (_c *MockIPServicer_lookupIP_Call) Run(run func(host string)) *MockIPServicer_lookupIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIPServicer_lookupIP_Call) Return(_a0 []net.IP, _a1 error) *MockIPServicer_lookupIP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIPServicer_lookupIP_Call) RunAndReturn(run func(string) ([]net.IP, error)) *MockIPServicer_lookupIP_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIPServicer creates a new instance of MockIPServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIPServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIPServicer {
	mock := &MockIPServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
