// Code generated by mockery v2.42.2. DO NOT EDIT.

package middleware

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthenServicer is an autogenerated mock type for the AuthenServicer type
type MockAuthenServicer struct {
	mock.Mock
}

type MockAuthenServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthenServicer) EXPECT() *MockAuthenServicer_Expecter {
	return &MockAuthenServicer_Expecter{mock: &_m.Mock}
}

// RedirectURL provides a mock function with given fields: c
func (_m *MockAuthenServicer) RedirectURL(c *gin.Context) {
	_m.Called(c)
}

// MockAuthenServicer_RedirectURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RedirectURL'
type MockAuthenServicer_RedirectURL_Call struct {
	*mock.Call
}

// RedirectURL is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MockAuthenServicer_Expecter) RedirectURL(c interface{}) *MockAuthenServicer_RedirectURL_Call {
	return &MockAuthenServicer_RedirectURL_Call{Call: _e.mock.On("RedirectURL", c)}
}

func (_c *MockAuthenServicer_RedirectURL_Call) Run(run func(c *gin.Context)) *MockAuthenServicer_RedirectURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockAuthenServicer_RedirectURL_Call) Return() *MockAuthenServicer_RedirectURL_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthenServicer_RedirectURL_Call) RunAndReturn(run func(*gin.Context)) *MockAuthenServicer_RedirectURL_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: bearerToken
func (_m *MockAuthenServicer) Verify(bearerToken string) error {
	ret := _m.Called(bearerToken)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(bearerToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthenServicer_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type MockAuthenServicer_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - bearerToken string
func (_e *MockAuthenServicer_Expecter) Verify(bearerToken interface{}) *MockAuthenServicer_Verify_Call {
	return &MockAuthenServicer_Verify_Call{Call: _e.mock.On("Verify", bearerToken)}
}

func (_c *MockAuthenServicer_Verify_Call) Run(run func(bearerToken string)) *MockAuthenServicer_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthenServicer_Verify_Call) Return(_a0 error) *MockAuthenServicer_Verify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthenServicer_Verify_Call) RunAndReturn(run func(string) error) *MockAuthenServicer_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthenServicer creates a new instance of MockAuthenServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthenServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthenServicer {
	mock := &MockAuthenServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
