// Code generated by mockery v2.42.2. DO NOT EDIT.

package visit

import mock "github.com/stretchr/testify/mock"

// MockRepositorier is an autogenerated mock type for the Repositorier type
type MockRepositorier struct {
	mock.Mock
}

type MockRepositorier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepositorier) EXPECT() *MockRepositorier_Expecter {
	return &MockRepositorier_Expecter{mock: &_m.Mock}
}

// FindAll provides a mock function with given fields:
func (_m *MockRepositorier) FindAll() ([]Visit, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []Visit
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Visit, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Visit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Visit)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositorier_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockRepositorier_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *MockRepositorier_Expecter) FindAll() *MockRepositorier_FindAll_Call {
	return &MockRepositorier_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *MockRepositorier_FindAll_Call) Run(run func()) *MockRepositorier_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepositorier_FindAll_Call) Return(_a0 []Visit, _a1 error) *MockRepositorier_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositorier_FindAll_Call) RunAndReturn(run func() ([]Visit, error)) *MockRepositorier_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: id
func (_m *MockRepositorier) FindById(id int) (*Visit, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *Visit
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*Visit, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *Visit); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Visit)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositorier_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockRepositorier_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - id int
func (_e *MockRepositorier_Expecter) FindById(id interface{}) *MockRepositorier_FindById_Call {
	return &MockRepositorier_FindById_Call{Call: _e.mock.On("FindById", id)}
}

func (_c *MockRepositorier_FindById_Call) Run(run func(id int)) *MockRepositorier_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRepositorier_FindById_Call) Return(_a0 *Visit, _a1 error) *MockRepositorier_FindById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositorier_FindById_Call) RunAndReturn(run func(int) (*Visit, error)) *MockRepositorier_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepositorier creates a new instance of MockRepositorier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepositorier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepositorier {
	mock := &MockRepositorier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
