// Code generated by mockery v2.42.2. DO NOT EDIT.

package repository

import mock "github.com/stretchr/testify/mock"

// MockOwnerRepositorier is an autogenerated mock type for the OwnerRepositorier type
type MockOwnerRepositorier struct {
	mock.Mock
}

type MockOwnerRepositorier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOwnerRepositorier) EXPECT() *MockOwnerRepositorier_Expecter {
	return &MockOwnerRepositorier_Expecter{mock: &_m.Mock}
}

// FindAll provides a mock function with given fields:
func (_m *MockOwnerRepositorier) FindAll() ([]Owner, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []Owner
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Owner, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Owner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Owner)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOwnerRepositorier_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockOwnerRepositorier_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *MockOwnerRepositorier_Expecter) FindAll() *MockOwnerRepositorier_FindAll_Call {
	return &MockOwnerRepositorier_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *MockOwnerRepositorier_FindAll_Call) Run(run func()) *MockOwnerRepositorier_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOwnerRepositorier_FindAll_Call) Return(_a0 []Owner, _a1 error) *MockOwnerRepositorier_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOwnerRepositorier_FindAll_Call) RunAndReturn(run func() ([]Owner, error)) *MockOwnerRepositorier_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllWithPets provides a mock function with given fields:
func (_m *MockOwnerRepositorier) FindAllWithPets() ([]Owner, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAllWithPets")
	}

	var r0 []Owner
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Owner, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Owner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Owner)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOwnerRepositorier_FindAllWithPets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllWithPets'
type MockOwnerRepositorier_FindAllWithPets_Call struct {
	*mock.Call
}

// FindAllWithPets is a helper method to define mock.On call
func (_e *MockOwnerRepositorier_Expecter) FindAllWithPets() *MockOwnerRepositorier_FindAllWithPets_Call {
	return &MockOwnerRepositorier_FindAllWithPets_Call{Call: _e.mock.On("FindAllWithPets")}
}

func (_c *MockOwnerRepositorier_FindAllWithPets_Call) Run(run func()) *MockOwnerRepositorier_FindAllWithPets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOwnerRepositorier_FindAllWithPets_Call) Return(_a0 []Owner, _a1 error) *MockOwnerRepositorier_FindAllWithPets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOwnerRepositorier_FindAllWithPets_Call) RunAndReturn(run func() ([]Owner, error)) *MockOwnerRepositorier_FindAllWithPets_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: id
func (_m *MockOwnerRepositorier) FindById(id int) (*Owner, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *Owner
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*Owner, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *Owner); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Owner)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOwnerRepositorier_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockOwnerRepositorier_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - id int
func (_e *MockOwnerRepositorier_Expecter) FindById(id interface{}) *MockOwnerRepositorier_FindById_Call {
	return &MockOwnerRepositorier_FindById_Call{Call: _e.mock.On("FindById", id)}
}

func (_c *MockOwnerRepositorier_FindById_Call) Run(run func(id int)) *MockOwnerRepositorier_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockOwnerRepositorier_FindById_Call) Return(_a0 *Owner, _a1 error) *MockOwnerRepositorier_FindById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOwnerRepositorier_FindById_Call) RunAndReturn(run func(int) (*Owner, error)) *MockOwnerRepositorier_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// FindByLastName provides a mock function with given fields: lastName
func (_m *MockOwnerRepositorier) FindByLastName(lastName string) ([]Owner, error) {
	ret := _m.Called(lastName)

	if len(ret) == 0 {
		panic("no return value specified for FindByLastName")
	}

	var r0 []Owner
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]Owner, error)); ok {
		return rf(lastName)
	}
	if rf, ok := ret.Get(0).(func(string) []Owner); ok {
		r0 = rf(lastName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Owner)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(lastName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOwnerRepositorier_FindByLastName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByLastName'
type MockOwnerRepositorier_FindByLastName_Call struct {
	*mock.Call
}

// FindByLastName is a helper method to define mock.On call
//   - lastName string
func (_e *MockOwnerRepositorier_Expecter) FindByLastName(lastName interface{}) *MockOwnerRepositorier_FindByLastName_Call {
	return &MockOwnerRepositorier_FindByLastName_Call{Call: _e.mock.On("FindByLastName", lastName)}
}

func (_c *MockOwnerRepositorier_FindByLastName_Call) Run(run func(lastName string)) *MockOwnerRepositorier_FindByLastName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockOwnerRepositorier_FindByLastName_Call) Return(_a0 []Owner, _a1 error) *MockOwnerRepositorier_FindByLastName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOwnerRepositorier_FindByLastName_Call) RunAndReturn(run func(string) ([]Owner, error)) *MockOwnerRepositorier_FindByLastName_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: owner
func (_m *MockOwnerRepositorier) Insert(owner *Owner) (*Owner, error) {
	ret := _m.Called(owner)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 *Owner
	var r1 error
	if rf, ok := ret.Get(0).(func(*Owner) (*Owner, error)); ok {
		return rf(owner)
	}
	if rf, ok := ret.Get(0).(func(*Owner) *Owner); ok {
		r0 = rf(owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Owner)
		}
	}

	if rf, ok := ret.Get(1).(func(*Owner) error); ok {
		r1 = rf(owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOwnerRepositorier_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockOwnerRepositorier_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - owner *Owner
func (_e *MockOwnerRepositorier_Expecter) Insert(owner interface{}) *MockOwnerRepositorier_Insert_Call {
	return &MockOwnerRepositorier_Insert_Call{Call: _e.mock.On("Insert", owner)}
}

func (_c *MockOwnerRepositorier_Insert_Call) Run(run func(owner *Owner)) *MockOwnerRepositorier_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Owner))
	})
	return _c
}

func (_c *MockOwnerRepositorier_Insert_Call) Return(_a0 *Owner, _a1 error) *MockOwnerRepositorier_Insert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOwnerRepositorier_Insert_Call) RunAndReturn(run func(*Owner) (*Owner, error)) *MockOwnerRepositorier_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: owner
func (_m *MockOwnerRepositorier) Update(owner *Owner) (*Owner, error) {
	ret := _m.Called(owner)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *Owner
	var r1 error
	if rf, ok := ret.Get(0).(func(*Owner) (*Owner, error)); ok {
		return rf(owner)
	}
	if rf, ok := ret.Get(0).(func(*Owner) *Owner); ok {
		r0 = rf(owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Owner)
		}
	}

	if rf, ok := ret.Get(1).(func(*Owner) error); ok {
		r1 = rf(owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOwnerRepositorier_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockOwnerRepositorier_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - owner *Owner
func (_e *MockOwnerRepositorier_Expecter) Update(owner interface{}) *MockOwnerRepositorier_Update_Call {
	return &MockOwnerRepositorier_Update_Call{Call: _e.mock.On("Update", owner)}
}

func (_c *MockOwnerRepositorier_Update_Call) Run(run func(owner *Owner)) *MockOwnerRepositorier_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Owner))
	})
	return _c
}

func (_c *MockOwnerRepositorier_Update_Call) Return(_a0 *Owner, _a1 error) *MockOwnerRepositorier_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOwnerRepositorier_Update_Call) RunAndReturn(run func(*Owner) (*Owner, error)) *MockOwnerRepositorier_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOwnerRepositorier creates a new instance of MockOwnerRepositorier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOwnerRepositorier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOwnerRepositorier {
	mock := &MockOwnerRepositorier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
